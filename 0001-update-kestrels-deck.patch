From f693645617a08df2c12a7af6f89483a502b05526 Mon Sep 17 00:00:00 2001
From: Dave Doolin <david.doolin@gmail.com>
Date: Thu, 16 Sep 2016 11:33:53 -0700
Subject: [PATCH] update kestrels deck

---
 closure_test.rb  | 23 +++++++++++++++++++++++
 decks/kestrel.md | 52 +++++++++++++++++++++++++++++++++++-----------------
 2 files changed, 58 insertions(+), 17 deletions(-)
 create mode 100755 closure_test.rb

diff --git a/closure_test.rb b/closure_test.rb
new file mode 100755
index 0000000..62cdb62
--- /dev/null
+++ b/closure_test.rb
@@ -0,0 +1,23 @@
+#!/usr/bin/env ruby
+
+x = 5
+
+def m
+  p = Proc.new
+  x = 10
+  p.call(x)
+end
+
+m { |x| puts x }
+
+
+def lambda_check
+  x = -> { return }
+  x.()
+  puts 'returned from lambda'
+  y = Proc.new { return }
+  y.()
+  puts 'returned from proc'
+end
+
+lambda_check
diff --git a/decks/kestrel.md b/decks/kestrel.md
index ac476eb..e4d327d 100644
--- a/decks/kestrel.md
+++ b/decks/kestrel.md
@@ -1,21 +1,12 @@
 # Ruby's `tap` as a kestrel
 
-I ran across an interesting method in a colleague's commit
-recently, which monkey patched Ruby's `Array` class. To me, it nearly
-epitomizes Ruby's elegance by packing a number of powerful
-techniques into a single short line of code, without being unreadably
-complicated. No line noise here. While I'm not sold one way or the other
-on monkey patching, I was intrigued enough by the following `carve!`
-method to dig a bit deeper.
 
-# Cheap counterfeit
+# Carving an array with K Combinator
 
-*Note: this replicates functionality provided by `Enumerable.partition`,
-so there's probably no reason to use this in production.* On the other
-hand, as noted by Benjamin Tan in [The Ruby Closures
-Book](https://leanpub.com/therubyclosuresbook/read), implementing a [cheap
-counterfeit](https://practicingruby.com/articles/domain-specific-apis)
-is usually enlightening.
+
+I ran across an interesting method in a colleague's commit
+recently, which monkey patched Ruby's `Array` class with a method
+called `carve!`.
 
 
 # Here's the snippet under consideration:
@@ -32,6 +23,35 @@ end
 It does exactly what the name `carve!` implies, separating one Array
 into two Arrays based on the condition passed in as a block.
 
+### Enumerate.partition returns 2 new Arrays
+
+
+## Array.carve!
+
+### A personal opinion
+
+* epitomizes Ruby's elegance by packing a number of powerful
+techniques into a single short line of code,
+* without being unreadably
+complicated.
+* No line noise here.
+
+While I'm not sold one way or the other
+on monkey patching, I was intrigued enough by the following `carve!`
+method to dig a bit deeper.
+
+# Cheap counterfeit
+
+*Note: `carve!` almost replicates `Enumerable.partition`,
+so there's probably no reason to use it in production.*
+
+On the other
+hand, as noted by Benjamin Tan in [The Ruby Closures
+Book](https://leanpub.com/therubyclosuresbook/read), implementing a [cheap
+counterfeit](https://practicingruby.com/articles/domain-specific-apis)
+is usually enlightening.
+
+
 # How it works:
 
 * `dup` makes a copy of the values in the array and returns those values
@@ -81,9 +101,7 @@ returns `self` after processing the block. Normally, the result of the
 block would be returned. In combinatory logic, this behavior is defined
 by a function called *kestrel*, or $$K$$ Combinator:
 
-$$
-kxy = x.
-$$
+Kxy = (Kx)y = x.
 
 The theoretical importance of $$K$$ cannot be overstated. Combined with
 the $$S$$ combinator, the $$SK$$ calculus is equivalent to an untyped lambda
-- 
2.5.0

